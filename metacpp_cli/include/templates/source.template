R"(/****************************************************************************
** MetaCPP
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <MetaCPP/Type.hpp>
#include <MetaCPP/Field.hpp>
#include <MetaCPP/Method.hpp>
#include <MetaCPP/Storage.hpp>
#include <MetaCPP/SequentialContainer.hpp>

{{#includes}}
#include "{{file}}"
{{/includes}}

namespace metacpp { namespace generated {
	void Load(Storage* storage) {
		//////////////////////////////////////////////
		// Types
		//////////////////////////////////////////////
		{{#types}}
		{
			Type* type = new Type({{id}}, QualifiedName("{{qualifiedName}}"));
#if ({{hasSize}} == 1)
			type->SetSize(sizeof({{qualifiedName}}));
#else
			type->SetSize(sizeof(void*));
#endif
			type->SetArraySize({{arraySize}});
			type->SetKind(static_cast<TypeKind>({{kind}}));
			type->SetAccess(static_cast<AccessSpecifier>({{access}}));
			type->SetPolymorphic({{polymorphic}});
			
			// Base Types
			{{#baseTypes}}
			{
				{{#qualifiedType}}
				{
)" +
#include "source.qualifiedType.template"
+ R"(
					type->AddBaseType(qualifiedType, static_cast<AccessSpecifier>({{access}}));
				}
				{{/qualifiedType}}
			}
			{{/baseTypes}}
			
			// Derived Types
			{{#derivedTypes}}
			type->AddDerivedType({{derivedTypeId}});
			{{/derivedTypes}}
			
			// Template arguments
			{{#templateArguments}}
			{
#if ({{isIntegral}} == 1)
				type->AddTemplateArgument((unsigned long long){{integralValue}});
#else
				{
)" +
#include "source.qualifiedType.template"
+ R"(
					type->AddTemplateArgument(qualifiedType);
				}
#endif
			}
			{{/templateArguments}}
			
			// Fields
			{{#fields}}
			{
				{{#qualifiedType}}
				{
)" +
#include "source.qualifiedType.template"
+ R"(
					Field field(qualifiedType, QualifiedName("{{qualifiedName}}"));
					field.SetOffset({{offset}});
					type->AddField(field);
				}
				{{/qualifiedType}}
			}
			{{/fields}}
			
#if ({{access}} == 0 && {{valid}} == 1) // public & valid
			TypeInfo<{{qualifiedName}}>::ID = {{id}};
			TypeInfo<{{qualifiedName}}>::TYPE = type;
	
#if ({{polymorphic}} == 1) // polymorphic
			// Dynamic Casts
			{{#derivedTypes}}
			storage->AddDynamicCast({{id}}, {{derivedTypeId}}, [](void* ptr) -> void* {
				{{qualifiedName}}* obj = reinterpret_cast<{{qualifiedName}}*>(ptr);
				return dynamic_cast<{{derivedQualifiedName}}*>(obj);
			});
			{{/derivedTypes}}
#endif
			
#if ({{hasDefaultConstructor}} == 1) // hasDefaultConstructor
			// Constructor
			type->SetConstructor([](void* ptr) -> void* {
				return new (ptr) {{qualifiedName}};
			});
#endif
			// Destructor
#if ({{hasDefaultDestructor}} == 1) // hasDefaultDestructor
			type->SetDestructor([](void* ptr) -> void {
				struct _layout {
					{{qualifiedMemberName}};
				};
				std::destroy_at(std::launder(reinterpret_cast<_layout*>(ptr)));
			});
#endif

			// Methods
			{{#methods}}
			{
				Method method(QualifiedName("{{qualifiedName}}"));

				// Params
				{{#methodParams}}
					{{#qualifiedType}}
				{
)" +
#include "source.qualifiedType.template"
+ R"(
					method.AddParameter(MethodParameter("{{methodParamName}}", qualifiedType));
				}
					{{/qualifiedType}}

				{{/methodParams}}

				type->AddMethod(method);
			}
			{{/methods}}

#if ({{isSequentialContainer}} == 1) // isSequentialContainer
			// SequentialContainer
			class SequentialContainerSpecialization : public SequentialContainer {
			public:
				SequentialContainerSpecialization(Type* type) :
					m_Type(type)
#if ({{isStaticArray}} == 1) // isStaticArray
					, m_Counter(0)
#endif
				{
				};
				
				QualifiedType ValuesType() const override {
					return std::get<QualifiedType>(m_Type->GetTemplateArguments().at(0));
				}
			
				size_t Size(void* container) const override {
					return Cast(container).size();
				}
				
				void* At(void* container, size_t index) const override {
					return &Cast(container).at(index);
				}

#if ({{isStaticArray}} == 1) // isStaticArray
				void PushBack(void* container, void* item_ptr) const override {
					{{containerValueQualifiedName}}* item_obj = reinterpret_cast<{{containerValueQualifiedName}}*>(item_ptr);
					Cast(container)[m_Counter++]=*item_obj;
				}
#else
				void PushBack(void* container, void* item_ptr) const override {
					{{containerValueQualifiedName}}* item_obj = reinterpret_cast<{{containerValueQualifiedName}}*>(item_ptr);
					Cast(container).push_back(*item_obj);
				}
#endif
				
			private:
				{{qualifiedName}}& Cast(void* container) const {
					return *reinterpret_cast<{{qualifiedName}}*>(container);
				}
				
				Type* m_Type;
#if ({{isStaticArray}} == 1) // isStaticArray
				mutable size_t m_Counter{0};
#endif
			};
			type->SetContainer(new SequentialContainerSpecialization(type));
#endif

#endif

			storage->AddType(type);
		}
		{{/types}}
		
		//////////////////////////////////////////////
		// IDs
		//////////////////////////////////////////////
		{{#ids}}
		storage->AssignTypeID("{{qualifiedName}}", {{id}});
		{{/ids}}
	}
} }

)"